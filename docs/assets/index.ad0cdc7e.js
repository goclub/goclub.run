import{e,c as t,s as n,d as i,Q as l,v as o,V as r,E as s,G as m,q as a}from"./vendor.4f83bef4.js";function u(e){return""==e?"":"[]byte"==e?"Bytes":e.replace(e[0],e[0].toUpperCase())}function d(e){return""==e?"":e.replace(e[0],e[0].toLowerCase())}function c(e){return e.replace(/(^|_)(\w)/g,((e,t,n)=>n.toUpperCase()))}function f(e,t){switch(t=String(t),e){case"string":return`"${t}"`;case"[]byte":return`[]byte("${t}")`;default:return t}}var p={name:"spec-enum",components:{},template:'<div>\n<el-form label-width="8em" size="mini" >\n    <el-form-item label="示例配置">\n        <el-button size="mini" @click="exampleMarkEnumsBySource" type="primary" >LogKind</el-button>       \n    </el-form-item>\n    <el-form-item label="type">\n        <el-input  size="mini" placeholder="" style="width:10em;" @blur="amendEnumsName" v-model="enums.name"></el-input>\n        <el-select style="width:7em;"  size="mini" v-model="enums.type" placeholder="请选择">\n            <el-option\n                    v-for="item in options.enumsType"\n                    :key="item"\n                    :label="item"\n                    :value="item">\n            </el-option>\n        </el-select>\n    </el-form-item>\n    <el-form-item label="items">\n        <el-tag  v-if="enums.type != \'uint8\'" size="mini" type="info">建议先填 value</el-tag>\n        <el-tag  v-if="enums.type = \'uint8\'" size="mini" type="info">建议value从 1 开始，以避免 zero value 特性意外的插入0</el-tag>\n        <el-tag  size="mini" type="info">尽量不要编辑已存在的 value</el-tag>\n        <div v-for="(v, i) in enums.items" style="margin-bottom:0.5em;">\n            <span style="display:inline-block;min-width:3em;"></span>\n            <el-input placeholdeSourcer="field" size="mini" style="width:10em;" v-model="v.field" @blur="amendEnumsItemsField(i)" ></el-input>\n            <el-input placeholder="value"  size="mini" style="width:10em;" @blur="amendEnumsItemsValue(i)" v-model="v.value" ></el-input>\n            <el-button  @click="removeEnumsItem(i)" size="mini" type="danger" icon="el-icon-remove"></el-button>\n        </div>\n        <span style="display:inline-block;min-width:3em;"></span>\n        <div><el-button  @click="createNewItem" size="mini" type="primary" icon="el-icon-plus"></el-button></div>\n    </el-form-item>\n    <el-form-item label="Source enums">\n        <el-input placeholder="非必填" size="mini" style="width:20em;" v-model="source.enums"></el-input>\n        <el-button size="mini" type="primary" @click="markEnumsBySource" >覆盖</el-button>\n    </el-form-item>\n    <el-button @click="copyCode" >复制代码</el-button>\n    </el-form> \n    <pre style="margin-top:0;margin-right:0.5em;" class="language-go" v-html="enumsResultCode" ></pre>\n    <el-button @click="copyCode" >复制代码</el-button>\n</div>\n',computed:{enumsResult(){const t=this.enums;let n=0;return t.items.forEach((function(e){n<e.field.length&&(n=e.field.length)})),e.render('\n// Generate by https://t.goclub.run\n// ---------------------- DO NOT EDIT (Begin) ----------------------\n// Source enums:\n// <#- JSON.stringify(v) #>\ntype <#= v.name #> <#= v.type #>\n// Create <#= v.name #> by <#= v.type #>\nfunc New<#= v.name #>(v <#= v.type #>)(<#= firstLetterToLowerCase(v.name) #> <#= v.name #>, err error) {\n  <#= firstLetterToLowerCase(v.name) #> = <#= v.name #>(v)\n  err = <#= firstLetterToLowerCase(v.name) #>.Validator()\n  return\n}\n// return <#= v.name #> basic types\nfunc (v <#= v.name #>) <#= toTitle(v.type) #> () <#= v.type #> { return <#= v.type #>(v)}\n// Example: if <#= firstLetterToLowerCase(v.name) #> == <#= firstLetterToLowerCase(v.name) #>.Enum().xxx {...}\nfunc (<#= v.name #>) Enum() (e struct {\n<# v.items.forEach(function (item) { -#>\n  <#= item.field.padEnd(maxItemFieldLen) #> <#= v.name #>\n<# }) -#>\n}){\n  return Enum<#= v.name #>()\n}\n// Example: if <#= firstLetterToLowerCase(v.name) #> == Enum<#= v.name #>().xxx {...}\nfunc Enum<#= v.name #>() (e struct {\n<# v.items.forEach(function (item) { -#>\n  <#= item.field.padEnd(maxItemFieldLen) #> <#= v.name #>\n<# }) -#>\n}) {\n<# v.items.forEach(function (item) { -#>\n  e.<#= item.field.padEnd(maxItemFieldLen) #> = <#- govalue(v.type, item.value) #>\n<# }) -#>\n  return\n}\n// Type safe match of all values, likeness switch\nfunc (v <#= v.name #>) Match(\n<# v.items.forEach(function (item) { -#>\n  <#= item.field #> func(_ struct{<#= item.field #> bool}) error#>,\n<# }) -#>\n) error {\n  e := v.Enum()\n  switch v {\n  default:\n    return fmt.Errorf("<#= v.name #> can not be %s", v)\n<# v.items.forEach(function (item) { -#>\n  case e.<#= item.field #>:\n    return <#= item.field #>(struct{ <#= item.field #> bool } {})\n<# }) -#>\n  }\n}\n// Verify data\nfunc (v <#= v.name #>) Validator() error {\n    return v.Match(\n  <# v.items.forEach(function (item) { -#>\n    func(_ struct{<#= item.field #> bool}) error {return nil} -#>,\n  <# }) -#>)\n}\n// ---------------------- DO NOT EDIT (End) ----------------------\n',{v:this.enums,maxItemFieldLen:n,govalue:f,strToCamel:c,firstLetterToLowerCase:d,toTitle:u},{delimiter:"#"})},enumsResultCode(){return Prism.highlight(this.enumsResult,Prism.languages.go,"go")}},methods:{copyCode(){t(this.enumsResult),this.$message({message:"代码已复制到粘贴板",type:"success"})},exampleMarkEnumsBySource(){this.source.enums='{"name":"LogKind","type":"uint8","items":[{"field":"Info","value":"1"},{"field":"Danger","value":"2"}]}',this.markEnumsBySource()},markEnumsBySource(){let e=this.source.enums.replace("//",""),t={};try{t=JSON.parse(e)}catch{alert("源格式错误")}this.enums=t},createNewItem(){const e=this;let t={field:"",value:""};switch(e.enums.type){case"uint8":if(0==e.enums.items.length)t.value=1;else{let n=1;e.enums.items.forEach((function(e){let t=e.value;console.log(t,n),t>n&&(n=t)})),t.value=parseInt(n)+1}}e.enums.items=e.enums.items.concat([t])},removeEnumsItem(e){this.enums.items=this.enums.items.filter((function(t,n){return n!=e}))},amendEnumsName(){let e=this.enums.name;""!=e&&(this.enums.name=e.replace(e[0],e[0].toUpperCase()))},amendEnumsItemsValue(e){const t=this;let n=t.enums.items[e].value;t.enums.items.map((function(t,n){return n==e&&""==t.field&&(t.field=c(t.value)),t})),t.enums.items.forEach((function(t,i){i!=e&&t.value==n&&alert(t.field+":"+t.value+" 重复")}))},amendEnumsItemsField(e){const t=this;let n=t.enums.items[e].field;if(""!=n)switch(n=n.replace(n[0],n[0].toUpperCase()),t.enums.items[e].field=n,t.enums.type){case"string":case"[]byte":""==t.enums.items[e].value&&(t.enums.items[e].value=n.replace(n[0],n[0].toLowerCase()),t.amendEnumsItemsValue(e))}},blurModelTableName(){const e=this;""!=e.model.tableName&&""==e.model.tableStructName&&(e.model.tableStructName="Table"+c(e.model.tableName.replace(/s$/,"")))}},data:function(){return{options:{enumsType:["[]byte","string","uint8"]},source:{enums:""},enums:{name:"",type:"uint8",items:[]},model:{tableName:"",tableStructName:""}}}};function h(e){return n(e)}function y(e){return e.replace(/(^|_)(\w)/g,((e,t,n)=>n.toUpperCase()))}function v(e){return""==e?"":e.replace(/(^|_)(\w)/g,((e,t,n)=>n.toLowerCase()))}var g={name:"spec-model",components:{},template:'\n<div>\n <el-form label-width="8em" size="mini" >\n     <el-form-item label="文档">\n         <el-link href="https://goclub.run/sql/" target="_blank" >goclub/sql</el-link>\n     </el-form-item>\n    <el-form-item label="示例配置">\n        <el-button size="mini" type="primary" @click="useUserExampleData" >user</el-button>\n    </el-form-item>\n    <el-form-item label="package">\n        <el-input style="width:10em;" placeholder="eg:user" v-model="model.packageName"></el-input>\n    </el-form-item>\n    <el-form-item label="name">\n        struct:<el-input style="width:12em;" placeholder="eg:User" v-model="model.structName"  @blur="blurModelStructName" ></el-input>\n        table:<el-input style="width:12em;" v-model="model.tableName"></el-input>\n        \x3c!--table struct:<el-input style="width:16em;" v-model="model.tableStructName"></el-input> --\x3e\n    </el-form-item>\n    <el-form-item label="软删">\n        <el-select v-model="model.softDelete" @change="changeSofeDelete">\n            <el-option\n                v-for="item in options.softDelete"\n                :key="item"\n                :label="label(item)"\n                :value="item"\n            ></el-option>\n        </el-select>\n        <div v-if="model.softDelete == \'custom\'" style="padding-left:2em;opacity: 0.8;">\n            SoftDeleteWhere:\n            <br />\n            <el-input style="width:30em;" v-model="model.customSoftDelete.SoftDeleteWhere"/>\n            <br />\n            SoftDeleteSet:\n            <br />\n            <el-input style="width:30em;" v-model="model.customSoftDelete.SoftDeleteSet"/>\n        </div>\n    </el-form-item>\n    <el-form-item label="创建更新时间">\n        <el-select v-model="model.fieldCreateUpdate" style="width:15em;">\n            <el-option\n                v-for="item in options.fieldCreateUpdate"\n                :key="item"\n                :label="item"\n                :value="item"\n            ></el-option>\n        </el-select>\n    </el-form-item>\n    <el-form-item label="字段">\n        <table style="width:100%;">\n            <thead>\n                <tr>\n                    <th>主键</th>\n                    <th>自增</th>\n                    <th>ID别名</th>\n                    <th>GO字段</th>\n                    <th>GO类型</th>\n                    <th>table column</th>\n                    <th>注释</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tr v-for="(row, index) in model.fields">\n               <td>\n                   <el-switch v-model="row.isPrimaryKey"> </el-switch>\n               </td>\n               <td>\n                    <el-switch v-model="row.isAutoIncrement" @change="changeIsAutoIncrement(row,index)" > </el-switch>\n               </td>\n               <td>\n                <el-switch v-if="row.isPrimaryKey" v-model="row.isIDTypeAlias"></el-switch>\n               </td>\n               <td>\n                    <el-input v-model="row.goField"  @blur="blurGoFieldsItem(index)" > </el-input>\n                </td>\n               <td>\n                   <el-select v-model="row.goType" style="width:10em;" >\n                       <el-option\n                           v-for="item in options.fieldType"\n                           :key="item"\n                           :label="label(item)"\n                           :value="item"\n                       ></el-option>\n                   </el-select>\n                    <el-input v-if="row.goType == \'custom\'"  style="width:12em;"  placeholder="eg:UserLevel" v-model="row.goTypeCustom" ></el-input>\n               </td>\n               <td>\n                   <el-input v-model="row.column"  > </el-input>\n               </td>\n               <td>\n                   <el-input v-model="row.comment"  > </el-input>\n               </td>\n               <td>\n                   <el-button  @click="removeFieldsItem(index)" size="mini" type="danger" icon="el-icon-remove"></el-button>\n               </td>\n           </tr>\n        </table>\n\n        <el-button @click="addNewField" type="primary" icon="el-icon-plus">添加字段</el-button>\n    </el-form-item>\n</el-form>\n<el-button @click="copyCode" >复制代码</el-button>\n<pre style="margin-top:0;margin-right:0.5em;" class="language-go" v-html="modelResultCode" ></pre>\n<el-button @click="copyCode" >复制代码</el-button>\n</div>\n',computed:{modelResult(){const t=this,n=t.model;let i=0,l=0;return t.model.fields.forEach((function(e){e.goField.length>i&&(i=e.goField.length),e.goType.length>l&&(l=e.goType.length)})),i++,l++,e.render('\n// Generate by https://t.goclub.run\npackage <#- v.packageName #>\nimport (\n    "database/sql"\n    sq "github.com/goclub/sql"\n)\n\n<# v.fields.forEach(function (item) { -#>\n<# if(item.isPrimaryKey && item.isIDTypeAlias) {-#>\n// ID别名\ntype ID<#- v.structName #> <#- item.goType #>\nfunc NewID<#- v.structName #>(id <#- item.goType #>) ID<#- v.structName #> {\n    return ID<#- v.structName #>(id)\n}\nfunc (id ID<#- v.structName #>) <#= h.strToCamel(item.goType) #>() <#- item.goType #> {\n    return <#- item.goType #>(id)\n}\n<# } -#>\n<# }) -#>\ntype Table<#- v.structName #> struct {\n<# if (v.softDelete != "custom") { -#>\n    <#= v.softDelete #>\n<#} -#>\n}\n<# if (v.softDelete == "custom") { -#>\nfunc (Table<#- v.structName #>) SoftDeleteWhere() Raw {<#- v.customSoftDelete.SoftDeleteWhere #>}\nfunc (Table<#- v.structName #>) SoftDeleteSet() Raw   {<#- v.customSoftDelete.SoftDeleteSet #>}\n<#} -#>\n// 给 TableName 加上指针 * 能避免 db.InsertModel(user) 这种错误， 应当使用 db.InsertModel(&user) 或\nfunc (*Table<#- v.structName #>) TableName() string { return "<#= v.tableName#>" }\ntype <#= v.structName #> struct {\n<# v.fields.forEach(function (item) { -#>\n<# if (item.comment) { #>    // <#= item.comment #>\n<# } -#>\n    <#= h.padGoField(item) #><#= h.padGoType(item) #> `db:"<#= item.column #>"<#- h.sqTag(item)#>`\n<# }) -#>\n    Table<#= v.structName #>\n    <#= v.fieldCreateUpdate #>\n    sq.DefaultLifeCycle\n}\nfunc (v <#= v.structName #>) PrimaryKey() []sq.Condition {\n<# if (!h.hasPrimaryKey()) { -#>\n    panic("missing set primary key")\n<# } -#>\n    return sq.And(\n    <# v.fields.forEach(function (item) { -#><# if (item.isPrimaryKey) {#> v.Column().<#= item.goField #>, sq.Equal(v.<#= item.goField #>), <#}#>  <# }) #>\n    )\n}\n<# if (c.hasAutoIncrement()){#>\n// 创建后自增字段赋值处理\nfunc (v *<#= v.structName #>) AfterCreate(result sql.Result) error {\n    id, err := result.LastInsertId(); if err != nil {\n        return err\n    }\n<#if (c.autoIncrementItem()){-#>\n    v.<#- c.autoIncrementItem().goField#> = <#- c.autoIncrementValueCode()#>\n<#}-#>\n    return nil\n}\n<# } #>\nfunc (v Table<#= v.structName #>) Column() (col struct{\n<# v.fields.forEach(function (item) { -#>\n    <#= h.padGolFieldValue(item.goField)#> sq.Column\n<#})-#>\n    <#- c.ColumnFieldCreateUpdateTypeCode() #>\n}) {\n<# v.fields.forEach(function (item) { -#>\n    col.<#= h.padGolFieldValue(item.goField)#> = "<#= item.column#>"\n<#})-#>\n    <#- c.ColumnFieldCreateUpdateValueCode() #>\n    return\n}\n\n',{c:{notSetPrimaryKey:function(){return!n.fields.some((function(e){return e.isPrimaryKey}))},hasAutoIncrement:function(){return n.fields.some((function(e){return e.isAutoIncrement}))},autoIncrementItem:function(){let e=!1;return n.fields.some((function(t){if(t.isAutoIncrement)return e=t,!0})),e},autoIncrementValueCode:function(){let e={};n.fields.some((function(t){if(t.isAutoIncrement)return e=t,!0}));let i="id";return i=`${e.goType}(${i})`,e.isIDTypeAlias&&(i=`ID${t.model.structName}(${i})`),i},ColumnFieldCreateUpdateTypeCode(){let e="";switch(t.model.fieldCreateUpdate){case"sq.CreatedAtUpdatedAt":e="CreatedAt sq.Column\n\tUpdatedAt sq.Column";break;case"sq.CreateTimeUpdateTime":e="CreateTime sq.Column\n\tUpdateTime sql.Column";break;case"sq.GMTCreateGMTUpdate":e="GMTCreate sq.Column\n\tGMTUpdate sql.Column"}return e},ColumnFieldCreateUpdateValueCode(){let e="";switch(t.model.fieldCreateUpdate){case"sq.CreatedAtUpdatedAt":e='col.CreatedAt = "created_at"\n\tcol.UpdatedAt = "updated_at"';break;case"sq.CreateTimeUpdateTime":e='col.CreateTime = "create_time"\n\tcol.UpdateTime = "update_time"';break;case"sq.GMTCreateGMTUpdate":e='col.GMTCreate = "gmt_create"\n\tcol.GMTUpdate = "gmt_update"'}return e}},v:n,h:{strToCamel:y,strFirstLetterToLowCase:v,padGoField:function(e){return e.goField.padEnd(i," ")},padGoType:function(e){let n=e.goType;return"custom"===n&&(n=e.goTypeCustom),e.isIDTypeAlias&&(n="ID"+t.model.structName),n.padEnd(l," ")},padGolFieldValue:function(e){return e.padEnd(i," ")},sqTag:function(e){var t=[];return e.isAutoIncrement&&(t.push("ignoreInsert"),t.push("ignoreUpdate")),e.isPrimaryKey&&!e.isAutoIncrement&&t.push("ignoreUpdate"),0==t.length?"":` sql:"${t.join("|")}"`},hasPrimaryKey:function(){return n.fields.some((function(e){return e.isPrimaryKey}))}}},{delimiter:"#"})},modelResultCode(){return Prism.highlight(this.modelResult,Prism.languages.go,"go")}},created:function(){const e=this;setTimeout((function t(){localStorage.setItem("goclub_boot_tools_model_v2",JSON.stringify(e.model)),setTimeout(t,1e3)}),0)},methods:{label:e=>"custom"==e?"自定义":e,removeFieldsItem(e){this.model.fields=this.model.fields.filter((function(t,n){return n!=e}))},copyCode(){t(this.modelResult),this.$message({message:"代码已复制到粘贴板",type:"success"})},useUserExampleData(){this.model={packageName:"m",tableName:"user",structName:"User",softDelete:"sq.SoftDeletedAt",customSoftDelete:{SoftDeleteWhere:'return sq.Raw{"`deleted_at` IS NULL", nil}',SoftDeleteSet:'return sq.Raw{"`deleted_at` = ?" ,[]interface{}{time.Now()}}'},fieldCreateUpdate:"sq.CreatedAtUpdatedAt",fields:[{isAutoIncrement:!0,isPrimaryKey:!0,isIDTypeAlias:!0,column:"id",goType:"uint64",goTypeCustom:"",goField:"ID"},{isAutoIncrement:!1,isPrimaryKey:!1,isIDTypeAlias:!1,column:"name",goType:"string",goTypeCustom:"",goField:"Name"},{isAutoIncrement:!1,isPrimaryKey:!1,isIDTypeAlias:!1,column:"password_sha256",goType:"string",goTypeCustom:"",goField:"PasswordSha256"},{isAutoIncrement:!1,isPrimaryKey:!1,isIDTypeAlias:!1,column:"password_salt",goType:"string",goTypeCustom:"",goField:"PasswordSalt"}]}},blurModelStructName(){const e=this;e.model.structName=y(e.model.structName),""!=e.model.structName&&(e.model.tableName=h(e.model.structName))},addNewField(){this.model.fields=this.model.fields.concat({isAutoIncrement:!1,isPrimaryKey:!1,isIDTypeAlias:!1,column:"",goType:"",goTypeCustom:"",goField:""})},blurGoFieldsItem(e){let t=h(this.model.fields[e].goField);this.model.fields[e].column=t},changeSofeDelete(){const e=this;0==Object.values(e.model.customSoftDelete).join("").length&&(e.model.customSoftDelete=e.default.customSoftDelete)},changeIsAutoIncrement(e,t){const n=this;if(e.isAutoIncrement){n.model.fields[t].goType="uint64"}},resetModel(){this.model={packageName:"m",tableName:"",structName:"",softDelete:"",customSoftDelete:{SoftDeleteWhere:"",SoftDeleteSet:""},fieldCreateUpdate:"",fields:[]}}},data:function(){let e={packageName:"m",tableName:"",structName:"",softDelete:"",customSoftDelete:{SoftDeleteWhere:"",SoftDeleteSet:""},fieldCreateUpdate:"",fields:[]};const t=localStorage.getItem("goclub_boot_tools_model_v2");if(t)try{e=JSON.parse(t)}catch(n){console.log(n)}return{options:{softDelete:["custom","sq.SoftDeletedAt","sq.SoftDeleteTime","sq.SoftIsDeleted","sq.WithoutSoftDelete"],fieldType:["custom","bool","float32","float64","string","uint8","uint64","int","int32","int64","sql.NullTime"],fieldCreateUpdate:["sq.CreatedAtUpdatedAt","sq.CreateTimeUpdateTime","sq.GMTCreateGMTUpdate","without"]},default:{customSoftDelete:{SoftDeleteWhere:'return sq.Raw{"`deleted_at` IS NULL", nil}',SoftDeleteSet:'return sq.Raw{"`deleted_at` = ?" ,[]interface{}{time.Now()}}'}},model:e}}};var b={name:"gen-qrcode",components:{QrcodeVue:l},template:'\n<div>\n<el-form label-width="4em" size="mini" >\n   <el-form-item label="内容">\n       <el-tag style="cursor: pointer;" size="mini" @click="addPrefix(\'https://\')">https://</el-tag>\n       <el-tag style="cursor: pointer;" size="mini"  @click="addPrefix(\'http://\')">http://</el-tag>\n       <el-input ref="qrcodeInput" placeholder="请输入二维码内容" type="textarea" v-model="form.qrcode" ></el-input>\n   </el-form-item>\n   <el-form-item label="">\n              <el-button @click="clickRenderButton"  plain type="primary" style="width:100%" size="large" >生成</el-button>\n   </el-form-item>\n   </el-form>\n <el-row>\n <el-col :span="10">\n     <div style="padding-left: 3.6em;">\n       <div style="padding:1em;background: white;border:1px solid #ddd;display:inline-block;" >\n           <qrcode-vue :value="result" :size="form.size" ></qrcode-vue>\n       </div>\n       <div style="padding-top: 1em;">\n       尺寸: <el-input-number :step="20"  v-model="form.size"  :min="50" :max="300" ></el-input-number>\n       </div>\n     </div>\n   </el-col>\n   <el-col :span="14">\n\n     <div>最近生成的二维码</div>\n     <table style="width:100%;">\n        <thead>\n            <tr style="text-align:left;" >\n            <th>内容</th>\n            <th>时间</th>\n            <th>操作</th>\n            </tr>\n        </thead>\n        <tr v-for="item in form.history" style="line-height:2em;">\n            <td>\n            {{item.content}}\n            </td>\n            <td>{{item.time}}</td>\n            <td>\n                <el-link type="primary" @click="useHistory(item.content)">生成</el-link>\n                <el-link @click="delHistory(item.content)">删除</el-link>\n            </td>\n        </tr>\n     </table>\n   </el-col>\n   </el-row>\n</div>\n',computed:{result(){return this.render.trim()}},created:function(){const e=this;setTimeout((function(){e.$refs.qrcodeInput.focus()}),100),setTimeout((function t(){let n=JSON.stringify(e.form);localStorage.setItem("form_key_v4",n),setTimeout(t,1e3)}),1e3),this.render=this.form.qrcode},methods:{clickRenderButton:function(){this.render=this.form.qrcode;const e=this;if(""!=this.render.trim()){if(this.form.history.some((function(t){return e.render==t.content})))return;this.form.history=this.form.history.concat({content:this.render,time:i("yyyy-MM-dd hh:mm:ss")})}},useHistory:function(e){this.render=e,this.form.qrcode=e},delHistory:function(e){this.form.history=this.form.history.filter((function(t){return console.log(t,e),t.content!=e}))},addPrefix:function(e){this.form.qrcode=this.form.qrcode.trim(),0!=this.form.qrcode.indexOf("http")&&(this.form.qrcode=e+this.form.qrcode),this.$refs.qrcodeInput.focus()},clearHistory:function(){this.form.history=[]}},data:function(){let e={qrcode:"",size:300,history:[]},t=localStorage.getItem("form_key_v4");if(t)try{e=JSON.parse(t)}catch(n){console.log(n)}return{render:"",form:e}}};var T={name:"gen-uuid",components:{},template:'\n<el-form label-width="8em" size="mini" >\n    <el-form-item label="UUID v4">\n        {{UUID}} <el-button @click="copyUUID" >复制</el-button>               \n    </el-form-item>\n    <el-form-item label="short UUID v4">\n        {{shortUUID}} <el-button @click="copyShortUUID" >复制</el-button>               \n    </el-form-item>\n    <el-form-item label="">\n        <el-button @click="refreshUUID" >刷新</el-button>               \n    </el-form-item>\n</el-form>\n',computed:{shortUUID(){return this.UUID.replaceAll("-","")}},methods:{copyUUID(){t(this.UUID),this.$message({message:"uuid已复制到粘贴板",type:"success"})},copyShortUUID(){t(this.shortUUID),this.$message({message:"short uuid已复制到粘贴板",type:"success"})},refreshUUID(){this.UUID=o()}},data:function(){return{UUID:o()}}};r.use(s);const I={GithubButton:m};I[p.name]=p,I[g.name]=g,I[b.name]=b,I[T.name]=T;new r({el:"#app",components:I,data:function(){return{activeTool:a.parse(location.search).k||"repo",repos:[["sql","基于 sqlx 实现更易用的sql, 接口优雅的同时媲美 sqlx 的性能"],["error","错误处理指南和错误码"],["http","Go 官方 net/http 标准库和 mux 的扩展, 对错误处理友好"],["session","安全易用的 session golang 库"],["validator","类型安全的结构体数据验证器"],["json","go 宽容的JSON处理, Marshal 支持 nil => [] , Unmarshal 支持 string => int or float"],["time","time 的一些便捷扩展"]]}},methods:{changeTag:function(e,t){history.pushState({},"",`${location.pathname}?k=${this.activeTool}`)},handleChangeCollapse:function(e,t){console.log(e)}},created:function(){}}).$el.style.display="block";
